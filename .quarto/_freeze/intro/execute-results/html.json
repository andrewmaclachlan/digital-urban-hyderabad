{
  "hash": "4c9de55705c2ffb3b867e69a434b6d14",
  "result": {
    "markdown": "# Getting started with R\n\nThis will be just a **brief overview of how to use the R data science language to get through this workshop**. There is a package for almost everything you can think of in R and it is easy to get overwhelmed.\n\nIf you are some kind of masochist, you are welcome to use the bundled R GUI for all of your work. If pain is not your thing, then for this practical (and future practicals) I will assume that you are using RStudio.\n\n1. From the start menu on your computer, find and run RStudio\n\nOnce RStudio has opened, the first thing we will do is create a new project – projects enable you to organise your work effectively and store all of the files you create and work with for a particular task. \n\n1. To create a new project (and this will vary a little depending on the version of RStudio you are using) select File > New Project\n\n1. Select Start a project in a brand new working directory and create a new project in a directory on your computer...\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](prac2_images/r_newproject.png){fig-align='center' width=500px}\n:::\n:::\n\n\nMy file directory (the second box here) will be different to yours as this is my teaching resources folder. Keep yours simple.\n\nSetting up a project is extremely useful as it lets you easily access your data and files...for example....any ```.csv``` is stored at the **full** file path of...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmycsv <- read_csv(\"C:/Users/Andy/OneDrive - University College London/Teaching/CASA0005/2020_2021/CASA0005repo/Prac1_data/fly_tipping_borough_edit.csv\"\")  \n```\n:::\n\n\nHowever as i've set my R project up in the CASA0005repo folder with different data folders for each week i can just use:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmycsv <- read_csv(\"Prac1_data/fly_tipping_borough_edit.csv\")  \n```\n:::\n\n\nIf i had the ```.csv``` file in the same folder as my project i could just use\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmycsv <- read_csv(\"fly_tipping_borough_edit.csv\")  \n```\n:::\n\n\n## Packages\n\nR is built on the concept of **packages**, these are collections of similar **functions** that allow us to do certain analysis.\n\nFor example, the **readr** package is helps us read in all kinds of data into R. It does this through a selection of functions including:\n\n*  `read_csv()` - this reads in a comma separated file (as shown above)\n*  `read_tsv()` - this reads in a tab separated file (the same as a csv but with tab spacing)\n\nWithin a function we specify **arguments** which control how the function should work. In the example above the file path is for the argument file. So it could also be written as:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmycsv <- read_csv(file=\"fly_tipping_borough_edit.csv\")  \n```\n:::\n\n\nIn this example we are also saving our csv into an **object**, here i have called it mycsv. \n\n## Pipes!\n\nIn R we often use the syntax (code) `%>%`, this is called **a pipe** and is an operator is part from the magrittr package. magrittr is an entirely new way of thinking about R syntax that clearly expresses a sequence of multiple operations. It is useful to think of the pipe operator as simply meaning “then”. Do this THEN do this THEN do that.\n\nIn R version 4.1 there is a new pipe `|>`. It is exactly at the same as `%>%` but means there is no reliance on the magrittr package. The good news is they can mostly be used interchangeably.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![How to use pipes to clean up your R code. Source: [  R for Ecology, 2022](https://www.rforecology.com/post/how-to-use-pipes/)](prac2_images/pipes.png){fig-align='center' width=450px}\n:::\n:::\n\n\n## Scripts\n\nIn R we can organise our code into scripts. There are several different versions of \"scripting files\" however the all serve a similar purpose. If you click File > New File you will see:\n\n* R script - this just allows code to be saved and run. \n\n* RMarkdown file - this allows code to be stored in \"chunks\" and text to outside the chunks, like this website.\n\n* Quarto file - a updated version of RMarkdown that is platform independent. It can be used in all different types of software.\n\nFor the purposes of this workshop use select an RMarkdown file...You will see something like this...\n\n![RStudio outline](general_images/RStudio_outline.png)\n\n\nRStudio outline\nHere we have:\n\n* Red box = Scripting area\n* Grey box = Environment, shows data that we have loaded and saved into \"objects\", like `mycsv` above.\n* Blue box = the files / data that are saved within this project\n* Yellow box = console, this can be used to query data, but the code is not saved.\n\nIf you click the knit button you will be asked to save the file. In my case you will see that i have added the code `car <- cars` and it has appeared in the environment window. If you click car in the environment tab it will show the data. This data is loaded with R as an example. \n\n**Make sure you save you individual files**, the project is just a container and does not need saving.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}